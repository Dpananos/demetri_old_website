{
  "hash": "886f2f5da475f4b6e86c24e40698ddbb",
  "result": {
    "markdown": "---\ntitle: \"Coins and Factors\"\nauthor: \"Demetri Pananos\"\ndate: \"2017-12-29\"\ncategories: [Python, Riddler]\n---\n\nI love Fivethirtyeight's Riddler column.  Usually, I can solve the problem with computation, but on some rare occasions I can do some interesting math to get the solution without having to code.  [Here](https://fivethirtyeight.com/features/can-you-survive-this-deadly-board-game/) is the first puzzle I ever solved.  It is a simple puzzle, yet it has an elegant computational and analytic solution.  Let's take a look.\n\nThe puzzle says:\n\n>You place 100 coins heads up in a row and number them by position, with the coin all the way on the left No. 1 and the one on the rightmost edge No. 100. Next, for every number N, from 1 to 100, you flip over every coin whose position is a multiple of N. For example, first you'll flip over all the coins, because every number is a multiple of 1. Then you'll flip over all the even-numbered coins, because they're multiples of 2. Then you flip coins No. 3, 6, 9, 12  , And so on.   \n>\n>What do the coins look like when you're done? Specifically, which coins are heads down?\n\n\n## Computing the Solution\n\nThis is really easy to program.  Here is a little python script to compute the solution:\n\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom itertools import product\n\n\n# Array of 100 True.  True is Heads up\nNcoins = 100\ncoins = np.ones(Ncoins,dtype = bool)\nindex = np.arange(1,Ncoins+1)\n\n#Go through the coins\nfor N in range(1,Ncoins+1):\n    \n    coins[index%N==0] = ~coins[index%N==0]  #Flip the coin.  \n\n```\n\n\nShown below is the solution.  In dark blue are the coins face down (I've arranged them in a 10 by 10 grid and annotated them with their position for clarity).  When we take a look at the `coins` variable, we see that those coins in positions which are perfect squares pop out. That is an interesting result, but what is more interesting is reasoning out the solution without doing any computation at all!\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfig, ax = plt.subplots(dpi=240, figsize = (4, 4))\n\ncoin_grid = coins.reshape(10, 10)\n\n# Major ticks\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 10, 1))\n\n# Labels for major ticks\nax.set_xticklabels([])\nax.set_yticklabels([])\n\n# Minor ticks\nax.set_xticks(np.arange(-.5, 10, 1), minor=True)\nax.set_yticks(np.arange(-.5, 10, 1), minor=True)\n\nax.tick_params(length=0)\nax.grid(which='minor', color='k', linestyle='-', linewidth=1)\n\nax.imshow(coin_grid, cmap='YlGnBu_r', origin='upper')\n\n\npositions = range(10)\npos = product(positions, positions)\nnum = range(1, Ncoins+1)\n\nfor i, (n, (y, x)) in enumerate(zip(num, pos)):\n    ax.annotate(\n        text=f'{n}',\n        xy = (x, y),\n        ha='center',\n        va='center',\n        color='k' if coins[i] else 'white'\n    )\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n## Reasoning Out the Solution.\n\nFirst, let's think why a coin would end up face down.  If all coins start heads up, then it would take an odd number of flips for the coin to end up face down.  Since coins are only flipped when we pass a factor of a coin's position, then those coins in positions with an odd number of factors will be heads down at the end.\n\nSo 9 would end up heads down because it has factors 1 (flip face down), 3 (flip face up), and 9 (flip face down), while 6 would be heads up because it has factors 1, 2, 3, and 6.\n\nSo which numbers have an odd number of factors?  Here is where we get to do some interesting math.  The Fundamental Theorem of Arithmetic says that every integer $N>1$ is either prime or can be uniquely factored as a product of primes\n\n\n $$N = \\prod_{j} p_j^{a_j} \\>.$$ \n\n\nIf $N$ can be factored like this, that means it has \n\n\n$$\\prod_{j} (a_j +1)$$\n\n\nunique factors. \n\nIt is straight forward to argue that a composite odd number must be the product of odd numbers, so we know that the $a_j+1$ must be odd $\\forall j$, and so that means the $a_j$ are even and can be written as $a_j = 2n_j$.  Thus, our factorization becomes\n\n\n$$N = \\prod_j p_j^{2n_j} = \\prod_j (p_j^{n_j})^2 = \\left(\\prod_j p_j^{n_j} \\right)^2 \\>,$$\n\n\nwhich means that if $N$ has an odd number of factors, it must be a perfect square!  All done.\n\nI love trying to solve the Riddler's puzzle without coding.  It makes me draw upon knowledge I haven't used in a while, and may force me to learn something new.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}