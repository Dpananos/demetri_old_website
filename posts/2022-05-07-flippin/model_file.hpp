
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace model_file_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 25> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 14, column 2 to column 30)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 15, column 2 to column 27)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 18, column 2 to column 50)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 19, column 2 to column 50)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 20, column 2 to column 46)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 21, column 2 to column 50)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 22, column 2 to column 68)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 31, column 4 to column 21)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 33, column 4 to column 31)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 40, column 8 to column 42)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 39, column 12 to line 41, column 9)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 37, column 12 to column 46)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 36, column 24 to line 38, column 9)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 36, column 8 to line 41, column 9)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 35, column 19 to line 42, column 5)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 35, column 4 to line 42, column 5)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 25, column 2 to column 17)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 26, column 2 to column 23)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 27, column 2 to column 25)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 4, column 2 to column 12)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 5, column 2 to column 12)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 6, column 2 to column 12)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 7, column 2 to column 12)",
 " (in '/Users/demetri/Documents/dpananos.github.io/posts/2022-05-07-flippin/model_file.stan', line 11, column 4 to column 44)"};




class model_file_model final : public model_base_crtp<model_file_model> {

 private:
  int y_1_1;
  int y_0_1;
  int y_1_0;
  int y_0_0;
  std::vector<int> y; 
  
 
 public:
  ~model_file_model() { }
  
  inline std::string model_name() const final { return "model_file_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  model_file_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_file_model_namespace::model_file_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","y_1_1","int",
           std::vector<size_t>{});
      y_1_1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 20;
      y_1_1 = context__.vals_i("y_1_1")[(1 - 1)];
      current_statement__ = 21;
      context__.validate_dims("data initialization","y_0_1","int",
           std::vector<size_t>{});
      y_0_1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 21;
      y_0_1 = context__.vals_i("y_0_1")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization","y_1_0","int",
           std::vector<size_t>{});
      y_1_0 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 22;
      y_1_0 = context__.vals_i("y_1_0")[(1 - 1)];
      current_statement__ = 23;
      context__.validate_dims("data initialization","y_0_0","int",
           std::vector<size_t>{});
      y_0_0 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 23;
      y_0_0 = context__.vals_i("y_0_0")[(1 - 1)];
      current_statement__ = 24;
      y = std::vector<int>(4, std::numeric_limits<int>::min());
      
      
      current_statement__ = 24;
      stan::model::assign(y, std::vector<int>{y_1_1, y_0_1, y_1_0, y_0_0},
        "assigning variable y");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_file_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
              -1, 1, lp__);
      local_scalar_t__ q = DUMMY_VAR__;
      current_statement__ = 2;
      q = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      local_scalar_t__ prob_1_1 = DUMMY_VAR__;
      current_statement__ = 3;
      prob_1_1 = (q + (rho * (1 - q)));
      local_scalar_t__ prob_0_1 = DUMMY_VAR__;
      current_statement__ = 4;
      prob_0_1 = ((1 - q) * (1 - rho));
      local_scalar_t__ prob_1_0 = DUMMY_VAR__;
      current_statement__ = 5;
      prob_1_0 = (q * (1 - rho));
      local_scalar_t__ prob_0_0 = DUMMY_VAR__;
      current_statement__ = 6;
      prob_0_0 = ((1 - q) + (rho * q));
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(theta,
        stan::math::multiply(0.5, (Eigen::Matrix<local_scalar_t__,-1,1>(4) <<
          prob_1_1, prob_0_1, prob_1_0, prob_0_0).finished()),
        "assigning variable theta");
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "prob_1_1", prob_1_1, 0);
      current_statement__ = 3;
      stan::math::check_less_or_equal(function__, "prob_1_1", prob_1_1, 1);
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "prob_0_1", prob_0_1, 0);
      current_statement__ = 4;
      stan::math::check_less_or_equal(function__, "prob_0_1", prob_0_1, 1);
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "prob_1_0", prob_1_0, 0);
      current_statement__ = 5;
      stan::math::check_less_or_equal(function__, "prob_1_0", prob_1_0, 1);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "prob_0_0", prob_0_0, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "prob_0_0", prob_0_0, 1);
      current_statement__ = 7;
      stan::math::check_simplex(function__, "theta", theta);
      {
        current_statement__ = 17;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(q, 1, 1));
        current_statement__ = 18;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(rho, -1, 1));
        current_statement__ = 19;
        lp_accum__.add(stan::math::multinomial_lpmf<propto__>(y, theta));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_file_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
              -1, 1, lp__);
      double q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      q = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      double prob_1_1 = std::numeric_limits<double>::quiet_NaN();
      double prob_0_1 = std::numeric_limits<double>::quiet_NaN();
      double prob_1_0 = std::numeric_limits<double>::quiet_NaN();
      double prob_0_0 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> theta =
         Eigen::Matrix<double, -1, 1>::Constant(4,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(rho);
      out__.write(q);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      prob_1_1 = (q + (rho * (1 - q)));
      current_statement__ = 4;
      prob_0_1 = ((1 - q) * (1 - rho));
      current_statement__ = 5;
      prob_1_0 = (q * (1 - rho));
      current_statement__ = 6;
      prob_0_0 = ((1 - q) + (rho * q));
      current_statement__ = 7;
      stan::model::assign(theta,
        stan::math::multiply(0.5, (Eigen::Matrix<local_scalar_t__,-1,1>(4) <<
          prob_1_1, prob_0_1, prob_1_0, prob_0_0).finished()),
        "assigning variable theta");
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "prob_1_1", prob_1_1, 0);
      current_statement__ = 3;
      stan::math::check_less_or_equal(function__, "prob_1_1", prob_1_1, 1);
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "prob_0_1", prob_0_1, 0);
      current_statement__ = 4;
      stan::math::check_less_or_equal(function__, "prob_0_1", prob_0_1, 1);
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "prob_1_0", prob_1_0, 0);
      current_statement__ = 5;
      stan::math::check_less_or_equal(function__, "prob_1_0", prob_1_0, 1);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "prob_0_0", prob_0_0, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "prob_0_0", prob_0_0, 1);
      current_statement__ = 7;
      stan::math::check_simplex(function__, "theta", theta);
      if (emit_transformed_parameters__) {
        out__.write(prob_1_1);
        out__.write(prob_0_1);
        out__.write(prob_1_0);
        out__.write(prob_0_0);
        out__.write(theta);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yppc =
         Eigen::Matrix<double, -1, 1>::Constant(300,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      stan::model::assign(yppc, stan::math::bernoulli_rng(q, base_rng__),
        "assigning variable yppc", stan::model::index_uni(1));
      current_statement__ = 16;
      for (int i = 2; i <= 300; ++i) {
        current_statement__ = 14;
        if (stan::math::logical_eq(
              stan::model::rvalue(yppc, "yppc",
                stan::model::index_uni((i - 1))), 1)) {
          current_statement__ = 12;
          stan::model::assign(yppc,
            stan::math::bernoulli_rng(prob_1_1, base_rng__),
            "assigning variable yppc", stan::model::index_uni(i));
        } else {
          current_statement__ = 10;
          stan::model::assign(yppc,
            stan::math::bernoulli_rng(prob_1_0, base_rng__),
            "assigning variable yppc", stan::model::index_uni(i));
        }
      }
      out__.write(yppc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, rho);
      local_scalar_t__ q = DUMMY_VAR__;
      q = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, q);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho", "q", "prob_1_1", "prob_0_1",
      "prob_1_0", "prob_0_0", "theta", "yppc"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(300)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "q");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "prob_1_1");
      param_names__.emplace_back(std::string() + "prob_0_1");
      param_names__.emplace_back(std::string() + "prob_1_0");
      param_names__.emplace_back(std::string() + "prob_0_0");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 300; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "q");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "prob_1_1");
      param_names__.emplace_back(std::string() + "prob_0_1");
      param_names__.emplace_back(std::string() + "prob_1_0");
      param_names__.emplace_back(std::string() + "prob_0_0");
      for (int sym1__ = 1; sym1__ <= (4 - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 300; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_1_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_0_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_1_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_0_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yppc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(300) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_1_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_0_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_1_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prob_0_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((4 - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yppc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(300) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 1);
      const size_t num_transformed = ((((1 + 1) + 1) + 1) + 4);
      const size_t num_gen_quantities = 300;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 1);
      const size_t num_transformed = ((((1 + 1) + 1) + 1) + 4);
      const size_t num_gen_quantities = 300;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"rho", "q"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model_file_model_namespace::model_file_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_file_model_namespace::profiles__;
}

#endif


